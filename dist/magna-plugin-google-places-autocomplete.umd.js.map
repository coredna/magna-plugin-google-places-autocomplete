{"version":3,"file":"magna-plugin-google-places-autocomplete.umd.js","sources":["../src/index.js"],"sourcesContent":["import $ from 'jquery'\r\nimport { Plugin, State } from '@coredna/magna'\r\n\r\nexport default class GooglePlacesAutocomplete extends Plugin {\r\n\r\n  [Symbol.toStringTag] = 'GooglePlacesAutocomplete'\r\n\r\n  autocomplete = null\r\n\r\n  _state = new State({})\r\n\r\n  /**\r\n   * Using this format you can specify the fields you wish to use from google autocomplete and their matching input selector\r\n   *\r\n   * @type {{country: {selector: string, type: string}, unit: {selector: string, type: string}, address: {selector: string, type: string}, city: {selector: string, type: string}, postcode: {selector: string, type: string}, state: {selector: string, type: string}}}\r\n   */\r\n   static prefixDefaultFields = prefix => ({\r\n    country:  { selector: `[name=\"${prefix}countryid\"]`, type: 'short_name' },\r\n    unit:     { selector: `[name=\"${prefix}address2\"]`, type: 'long_name' },\r\n    address:  { selector: `[name=\"${prefix}address1\"]`, type: 'long_name' },\r\n    postcode: { selector: `[name=\"${prefix}postcode\"]`, type: 'short_name' },\r\n    city:     { selector: `[name=\"${prefix}city\"]`, type: 'long_name' },\r\n    state:    { selector: `[name=\"${prefix}state\"]`, type: 'short_name' },\r\n  })\r\n\r\n  // Create the default fields without a prefix\r\n  static defaultFields = GooglePlacesAutocomplete.prefixDefaultFields('')\r\n\r\n  static defaultConfig = {\r\n    API_KEY: '',\r\n    country: 'US',\r\n    fields: {},\r\n    language: 'en-US',\r\n    selector: '#google-autocomplete',\r\n  }\r\n\r\n  constructor(config) {\r\n    super(config);\r\n    if (!this.config.API_KEY)\r\n      throw new Error('missing google places API_KEY from config')\r\n  }\r\n\r\n  initPromise({ request }) {\r\n    return this.#loadPlacesApi({ request, config: this.config })\r\n  }\r\n\r\n  init({ request, config }) {\r\n    this._state.subscribe('fields', this.config.updateFields || this.updateFields)\r\n  }\r\n\r\n\r\n  #reduceAddressComponents = (addressComponents, accumulator = {}) => {\r\n    // loop through  all the components in the componentForm object\r\n    Object.keys(componentForm).forEach(key => {\r\n      const component = componentForm[key]\r\n      const field = this.config.fields[component.name]\r\n      if (!field) return\r\n      // loop through each address item to find the value we are looking for\r\n      for (let ii = 0; ii < addressComponents.length; ii++) {\r\n        const addressItem = addressComponents[ii]\r\n        // if we find an addressItem with a matching type use it to set the field\r\n        if (addressItem.types.includes(key)) {\r\n          accumulator[component.name] = addressItem[field.type || component.type]\r\n        }\r\n      }\r\n    })\r\n    return accumulator\r\n  }\r\n\r\n  #initializeAutocomplete() {\r\n    // don't initialize the autocomplete on localhost as the google api key will fail\r\n    if (location.hostname === 'localhost' || location.hostname === '127.0.0.1')\r\n      return false\r\n    this.$input = $(this.config.selector)\r\n    // initialize google autocomplete\r\n    this.autocomplete = new google.maps.places.Autocomplete(\r\n      this.$input.get(0),\r\n      {\r\n        types: ['geocode'],\r\n        componentRestrictions: { country: this.config.country }\r\n      });\r\n    this.autocomplete.addListener('place_changed', this.onPlaceChanged);\r\n    // disable the enter key in the autosuggest\r\n    this.$input.on('keydown keyup keypress', this.#disableEnter)\r\n  }\r\n\r\n  onPlaceChanged = () => {\r\n    const place = this.autocomplete.getPlace();\r\n    // allow access to the place from the configuration\r\n    if (typeof this.config.onPlaceChanged === 'function') {\r\n      const result = this.config.onPlaceChanged.call(this, place)\r\n      // allow overriding the default behavior by returning false\r\n      if (result === false) {\r\n        return\r\n      }\r\n    }\r\n    const addressComponents = place.address_components\r\n    const fields = this.#reduceAddressComponents(addressComponents)\r\n    const value = this.$input.val()\r\n    // the street address that is returned from google generally misses unit numbers\r\n    // we will grab everything before the first comma to set the street address\r\n    const address = value.substr(0, value.indexOf(','))\r\n\r\n    this._state.setState('fields', _ => ({\r\n      ...fields,\r\n      address,\r\n    }))\r\n    // the original google address response is saved incase there are any issues\r\n    this._state.addressComponents = addressComponents\r\n  }\r\n\r\n  updateFields = values => {\r\n    Object.keys(this.config.fields).forEach(key => {\r\n      const field = this.config.fields[key]\r\n      $(field.selector).val(values[key])\r\n    })\r\n  }\r\n\r\n\r\n  #loadPlacesApi = ({ config }) => new Promise((res, rej) => {\r\n    if (window?.google?.maps) {\r\n      this.#initializeAutocomplete()\r\n      return res()\r\n    }\r\n    window.initAutocomplete = this.#initializeAutocomplete.bind(this)\r\n    const script = document.createElement('script')\r\n    script.src=`https://maps.google.com/maps/api/js?` + $.param({\r\n      libraries: 'places',\r\n      language: config.language,\r\n      callback: 'initAutocomplete',\r\n      key: config.API_KEY\r\n    })\r\n    script.onload = () => res({ success: true, message: 'google autocomplete loaded' })\r\n    script.onerror = () => rej(new Error('failed to load google places autocomplete'))\r\n    document.head.appendChild(script)\r\n  })\r\n\r\n  #disableEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault()\r\n      e.stopPropagation()\r\n    }\r\n  }\r\n\r\n}\r\n/*\r\n * this will attempt to find the most relevant piece of information from the google response\r\n * we will loop through each key until we find one that matches\r\n * */\r\nconst componentForm = {\r\n  street_number: {\r\n    type: 'short_name',\r\n    name: 'street_number',\r\n  },\r\n  route: {\r\n    type: 'short_name',\r\n    name: 'street',\r\n  },\r\n  colloquial_area: {\r\n    type: 'long_name',\r\n    name: 'city',\r\n  },\r\n  postal_town: {\r\n    type: 'short_name',\r\n    name: 'city',\r\n  },\r\n  neighborhood: {\r\n    type: 'long_name',\r\n    name: 'city',\r\n  },\r\n  sublocality: {\r\n    type: 'long_name',\r\n    name: 'city',\r\n  },\r\n  locality: {\r\n    type: 'long_name',\r\n    name: 'city',\r\n  },\r\n  postal_code_prefix: {\r\n    type: 'short_name',\r\n    name: 'postcode',\r\n  },\r\n  postal_code: {\r\n    type: 'short_name',\r\n    name: 'postcode',\r\n  },\r\n  administrative_area_level_1: {\r\n    type: 'short_name',\r\n    name: 'state',\r\n  },\r\n  country: {\r\n    type: 'short_name',\r\n    name: 'countryId'\r\n  }\r\n}\r\n"],"names":["Symbol","toStringTag","GooglePlacesAutocomplete","config","State","addressComponents","accumulator","Object","keys","componentForm","forEach","key","component","field","fields","name","ii","length","addressItem","types","includes","type","place","autocomplete","getPlace","onPlaceChanged","result","call","address_components","value","$input","val","address","substr","indexOf","_state","setState","_","values","$","selector","Promise","res","rej","window","google","maps","initAutocomplete","bind","script","document","createElement","src","param","libraries","language","callback","API_KEY","onload","success","message","onerror","Error","head","appendChild","e","keyCode","preventDefault","stopPropagation","request","subscribe","updateFields","Plugin","prefix","country","unit","postcode","city","state","prefixDefaultFields","location","hostname","places","Autocomplete","get","componentRestrictions","addListener","on","street_number","route","colloquial_area","postal_town","neighborhood","sublocality","locality","postal_code_prefix","postal_code","administrative_area_level_1"],"mappings":"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"}